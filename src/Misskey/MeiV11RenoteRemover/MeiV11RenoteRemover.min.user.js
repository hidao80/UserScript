// @license     MIT
(async()=>{const DEBUG=false;const SCRIPT_NAME="MeiV11RenoteRemover";const SCRIPT_CLASS="us-hidao80-"+SCRIPT_NAME;DEBUG&&console.debug(`[${SCRIPT_NAME}]: script started.`);const buttonIcon=`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" style="width: 1em; height: 1em; opacity: 1;">\n    <g>\n        <path fill="${JSON.parse(localStorage.getItem("theme")).noteText}" d="M3 6h18v2H3V6zm2 3h14l-1.5 13h-11L5 9zm3 2v8h2v-8H8zm4 0v8h2v-8h-2zM9 4V2h6v2h5v2H4V4h5z"/>\n    </g>\n</svg>`;let targetLane=document.querySelector(".transition.notes")??document.querySelector(".transition")??document.body;const observer=new MutationObserver(observerCallback);observer.observe(targetLane,{childList:true});function observerCallback(mutationsList){for(const mutation of mutationsList){if(mutation.type==="childList"){const renotes=document.querySelectorAll(".note.renote");if(renotes.length>0){addRenoteRemoveButton(renotes)}}}targetLane=document.querySelector(".transition.notes")??document.querySelector(".transition")??document.body;observer.observe(targetLane,{childList:true})}function addRenoteRemoveButton(renotes){DEBUG&&console.debug(`[${SCRIPT_NAME}]: addRenoteRemoveButton called. Found ${renotes.length} renotes.`);if(renotes.length==0){return}for(const renote of renotes){if(renote.querySelector(`.${SCRIPT_CLASS}`)){continue}const button=document.createElement("button");button.className=`${SCRIPT_CLASS}`;button.innerHTML=buttonIcon;button.title="リノートを削除";button.style.cssText="background: transparent; border: none; cursor: pointer; padding: 0;";const noteId=renote.querySelector("article header .info a.created-at")?.href.match(/\/notes\/([a-zA-Z0-9]+)/)?.[1];const i=JSON.parse(localStorage.getItem("vuex")).i.token;DEBUG&&console.debug(`[${SCRIPT_NAME}]:`,noteId);button.addEventListener("click",(()=>{DEBUG&&console.debug(`[${SCRIPT_NAME}]: Removing renote.`);fetch(`https://${location.host}/api/notes/unrenote`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({i:i,noteId:noteId}),credentials:"omit"}).then((response=>{if(!response.ok){DEBUG&&console.error(`[${SCRIPT_NAME}]: Failed to remove renote. Status: ${response.status}`)}else{DEBUG&&console.debug(`[${SCRIPT_NAME}]: Renote removed successfully.`);renote.remove()}}))}));renote.appendChild(button);const renoteInfo=renote.querySelector(".renote");if(renoteInfo){renoteInfo.style.display="flex";renoteInfo.style.justifyContent="space-between";renoteInfo.style.alignItems="center";renoteInfo.appendChild(button)}else{DEBUG&&console.warn(`[${SCRIPT_NAME}]: renoteInfo not found for renote, appending button directly.`)}}}})();